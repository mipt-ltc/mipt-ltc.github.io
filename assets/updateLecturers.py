import json
import yaml
from datetime import datetime

def getLecturersSet():
    print('\n' + '='*10 + 
            ' Extracting lecturers names form the Tree. ' + '='*10)
    lecturersSet = set()
    for semester in getDriveTree().values():
        for subject in semester["children"].values():
            for id, note in subject["children"].items():
                if not addNameInSetOrReturnFalse(id, note, lecturersSet):
                    printNamingWarning(semester, subject, note)

    return lecturersSet

def addNameInSetOrReturnFalse(id, note, lecturersSet):
    note["id"] = id
    noteName = note["title"]
    if isFormatingCorrect(noteName):
        year, lecturer = noteName.split('_', 1)
        lecturer = lecturer.split('.')[0]
        lecturersSet.add(lecturer)
    
def getDriveTree():
    with open("../_data/autoGenerated/notesTree.json", "r") as notes:
        return json.loads(notes.read())  

def isFormatingCorrect(name):
    nameSplit = name.split('_', 1)
    if (len(nameSplit) == 2):
        year, lecturer = nameSplit
        if (isYearCorrect(year) and isLecturerCorrect(lecturer)):
            return True
    return False

def isYearCorrect(year):
    if year.isnumeric() and int(year) <= datetime.now().year:
        return True
    return False

def isLecturerCorrect(lecturer):
    lecSplit = lecturer.split('.')
    if len(lecSplit) == 2 and lecSplit[0] != '' and lecSplit[1] == 'pdf':
        return True
    return False

def printNamingWarning(semester, subject, note):
    print('-'*10 + ' suspicious naming detected ' + '-'*10)
    print('path: ' + semester["title"] + '/' +
            subject["title"] + '/' + note["title"])
    print('link: ' + 'https://drive.google.com/file/d/' + note["id"])
    print('-'*10 + '                            ' + '-'*10)

def addNewAliases(lecturersSet):
    database = getLecturersDatabase()
    print('\n' + '='*10 + ' Checking if lecturers in database. ' + '='*10)
    for name in lecturersSet:
        if not isNameInDatabase(name, database):
            print('"' + name + '" is not in database.')

def getLecturersDatabase():
    with open("../_data/lecturers.yml", "r") as f:
        try:
            database = yaml.safe_load(f.read())
        except yaml.YAMLError as exc:
            print(exc)
    return database


def isNameInDatabase(name, database):
    for aliasesStr in database:
        if ('|' + name + '|') in aliasesStr:
            return True
    return False
    
def getSetOfSimmilarNames(name, database):
    SimNames = set()
    for aliasesStr in database:
        3+1
        # TODO: complete this funk
    return SimNames
    
def main():
    lecturersSet = getLecturersSet()
    addNewAliases(lecturersSet)

if __name__ == "__main__":
    main()

