import json
import yaml
from datetime import datetime

def getLecturersSet():
    lecturersSet = set()
    with open("../_data/autoGenerated/notesTree.json", "r") as notes:
        parsedNotes = json.loads(notes.read())  
        for semester in parsedNotes.values():
            for subject in semester["children"].values():
                for id, note in subject["children"].items():
                    note["id"] = id
                    noteName = note["title"]
                    if isFormatingCorrect(noteName):
                        year, lecturer = noteName.split('_', 1)
                        lecturer = lecturer.split('.')[0]
                        lecturersSet.add(lecturer)
                    else:
                        printNamingWarning(semester, subject, note)
    return lecturersSet

def isFormatingCorrect(name):
    nameSplit = name.split('_', 1)
    if (len(nameSplit) == 2):
        year, lecturer = nameSplit
        if (isYearCorrect(year) and isLecturerCorrect(lecturer)):
            return True
    return False

def isYearCorrect(year):
    if year.isnumeric() and int(year) <= datetime.now().year:
        return True
    return False
def isLecturerCorrect(lecturer):
    lecSplit = lecturer.split('.')
    if len(lecSplit) == 2 and lecSplit[0] != '' and lecSplit[1] == 'pdf':
        return True
    return False

def printNamingWarning(semester, subject, note):
    print('-'*10 + ' suspicious naming detected ' + '-'*10)
    print('path: ' + semester["title"] + '/' +
            subject["title"] + '/' + note["title"])
    print('link: ' + 'https://drive.google.com/file/d/' + note["id"])
    print('-'*10 + '                            ' + '-'*10)

def addNewAliases(lecturersSet):
    with open("../_data/lecturers.yml", "r") as f:
        database = f.read()
        try:
            print(yaml.safe_load(f))
            print(yaml.safe_load(database))
        except yaml.YAMLError as exc:
            print(exc)
    for name in lecturersSet:
        if ('|' + name + '|') not in database:
            print('"' + name + '" is not in database. Whant to add this name?')

def isNameInDatabase(name, database):
    return False
    

def getSetOfSimmilarNames():
    SimNames = set()
    return SimNames
    
def main():
    lecturersSet = getLecturersSet()
    addNewAliases(lecturersSet)
if __name__ == "__main__":
    main()

