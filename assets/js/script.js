---
---
const HIGH_MATCH_BOUNDARY = -5
const LOW_MATCH_BOUNDARY = -500

function clearFields() {
    document.getElementById('semester').value = '';
    document.getElementById('subject').value = '';
    document.getElementById('year').value = '';
    document.getElementById('lecturer').value = '';
    document.getElementById('notes-list').innerHTML = '';
}
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function getDriveUrl(noteId) {
    return 'https://drive.google.com/file/d/' + noteId;
}
function isIncludes(noteVal, userVal) {
    if (userVal == null || userVal == '') {
        return true;
    }
    return userVal.includes(noteVal);
}
function isIncludesLec(noteVal, userVal) {
    if (userVal == null || userVal == '') {
        return true;
    }
    return noteVal.includes(userVal);
}
function getFuzzyMatchScore(noteVal, userVal) {
    if (userVal == null || userVal == '') {
        return 0;
    }
    var results = fuzzysort.go(userVal, getAliasesList(noteVal));
    return (results.length == 0 
        ? Number.NEGATIVE_INFINITY : results[0]['score']);
}

function getName(aliasesStr) {
    return capitalizeFirstLetter(getAliasesList(aliasesStr)[0]);
}
function getNoteHTML(note, id, sem, subj, year, lec) {
    return '<div><a href="' + getDriveUrl(note['id']) + '" class="note-btn">' +
        'Sem: ' + note['semester'] + 
        '<hr>Subj: ' + getName(note['subject']) + 
        '<hr>Year: ' + note['year'] +
        '<hr>Lec: ' + getName(note['lecturer']) + '</a></div>';
}

function getNotesSectionHTML(notesList) {
    notesList.sort(function(first, second) {
        return second[0] - first[0];
    });
    var notesSectionHTML = '';
    var highMatchNotes = '';
    var medMatchNotes = '';
    var lowMatchNotes = '';
    notesList.forEach(function(item, index, array) {
        if (item[0] >= HIGH_MATCH_BOUNDARY) {
            highMatchNotes += item[1];
        } else if (item[0] > LOW_MATCH_BOUNDARY) {
            medMatchNotes += item[1];
        } else {
            lowMatchNotes += item[1];
        }
    })
    if ((medMatchNotes + lowMatchNotes).length != 0) {
        notesSectionHTML = '<hr><h2>High-matching Notes</h2>' + highMatchNotes +
            '<hr><h2>Medium-matching Notes</h2>' + medMatchNotes + 
            '<hr><h2>Low-matching Notes</h2>' + lowMatchNotes;
    } else {
        notesSectionHTML = highMatchNotes + medMatchNotes + lowMatchNotes;
        console.log('yay' + medMatchNotes.length);
    }
    return notesSectionHTML;
}

function getAliasesList(str) {
    return str.slice(1,-1).split('|');
}
function getUserInput() {
    return {'semester': document.getElementById('semester').value,
        'subject': document.getElementById('subject').value,
        'year': document.getElementById('year').value,
        'lecturer': document.getElementById('lecturer').value};
}
function isNoteMatching(note, userInput) {
    console.assert(note['semester'].length == 1);
    return isIncludes(note['semester'], userInput['semester']) &&
           isIncludes(note['year'], userInput['year']) &&
           isIncludesLec(note['lecturer'], userInput['lecturer']);
}
function getNotesList(userInput) {
    var notesList = [];
    {% for note in site.data.autoGenerated.notesList %}
        if (isNoteMatching({{ note | jsonify }}, userInput)) {
            notesList.push([
              getFuzzyMatchScore('{{ note.subject }})', userInput['subject']),
              getNoteHTML({{ note | jsonify }})]);
        } 
    {% endfor %}
    return notesList
}
function search() {
    document.getElementById('notes-list').innerHTML = 
        getNotesSectionHTML(getNotesList(getUserInput()));
}


function showSubjects() {

}
