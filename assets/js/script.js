---
---
const HIGH_MATCH_BOUNDARY = -5;
const LOW_MATCH_BOUNDARY = -500;
const DRIVE_FILE_URL_BEGINNING = 'https://drive.google.com/file/d/';

var searchInputElems;

function assignInputElements() {
    searchInputElems = {
        'semester': document.getElementById('semester'),
        'subject': document.getElementById('subject'),
        'year': document.getElementById('year'),
        'lecturer': document.getElementById('lecturer')
    };
}
function clearFields() {
    searchInputElems['semester'].value = '';
    searchInputElems['subject'].value = '';
    searchInputElems['year'].value = '';
    searchInputElems['lecturer'].value = '';
    document.getElementById('notes-list').innerHTML = '';
}
function clearSubjects() {
    document.getElementById('subjects-list').innerHTML = '';
}
function getDriveUrl(noteId) {
    return  + noteId;
}
function isIncludes(noteVal, userVal) {
    if (userVal == null || userVal == '') {
        return true;
    }
    return userVal.includes(noteVal);
}
function isIncludesLec(noteVal, userVal) {
    if (userVal == null || userVal == '') {
        return true;
    }
    return noteVal.includes(userVal);
}
function getFuzzyMatchScore(noteVal, userVal) {
    if (userVal == null || userVal == '') {
        return 0;
    }
    var results = fuzzysort.go(userVal, noteVal.split('|'));
    return (results.length == 0 
        ? Number.NEGATIVE_INFINITY : results[0]['score']);
}

function getNoteHTML(note, id, sem, subj, year, lec) {
    return '<div><a href="' + getDriveUrl(note['id']) + '" class="default-btn">' +
        'Sem: ' + note['semester'] + 
        '<hr>Subj: ' + note['subjectTitle'] + 
        '<hr>Year: ' + note['year'] +
        '<hr>Lec: ' + note['lecturerTitle'] + '</a></div>';
}

function getNotesSectionHTML(notesList) {
    notesList.sort(function(first, second) {
        return second[0] - first[0];
    });
    var notesSectionHTML = '';
    var highMatchNotes = '';
    var medMatchNotes = '';
    var lowMatchNotes = '';
    notesList.forEach(function(item, index, array) {
        if (item[0] >= HIGH_MATCH_BOUNDARY) {
            highMatchNotes += item[1];
        } else if (item[0] > LOW_MATCH_BOUNDARY) {
            medMatchNotes += item[1];
        } else {
            lowMatchNotes += item[1];
        }
    })
    if ((medMatchNotes + lowMatchNotes).length != 0) {
        notesSectionHTML = '<hr><h2>High-matching Notes</h2>' + highMatchNotes +
            '<hr><h2>Medium-matching Notes</h2>' + medMatchNotes + 
            '<hr><h2>Low-matching Notes</h2>' + lowMatchNotes;
    } else {
        notesSectionHTML = highMatchNotes + medMatchNotes + lowMatchNotes;
    }
    return notesSectionHTML;
}

function isNoteMatching(note) {
    console.assert(note['semester'].length == 1);
    return isIncludes(note['semester'], searchInputElems['semester'].value) &&
           isIncludes(note['year'], searchInputElems['year'].value) &&
           isIncludesLec(note['lecturer'], searchInputElems['lecturer'].value);
}
function getNotesList() {
    var notesList = [];
    {% for note in site.data.autoGenerated.notesList %}
        if (isNoteMatching({{ note | jsonify }})) {
            notesList.push([
              getFuzzyMatchScore('{{ note.subject }})', 
                  searchInputElems['subject'].value),
              getNoteHTML({{ note | jsonify }})]);
        } 
    {% endfor %}
    return notesList;
}
function search() {
    document.getElementById('notes-list').innerHTML = 
        getNotesSectionHTML(getNotesList());
}

function getSubjectSectionHTML(subjectsList) {
    subjecstSectionHTML = ''
    subjectsList.forEach(function(item, index, array) {
        subjecstSectionHTML += '<div class="default-btn" onclick="showNotes(' +
            "'" + item + "'" + ')">' + item + '</div>';
 
    })
    subjecstSectionHTML += 
       '<br><input type="submit" value="Clear" class="button"' + 
        'onclick="clearSubjects()" style="margin-bottom: 15px;">';
    return subjecstSectionHTML;
}
function showSubjects(semester) {
    var subjectsList = [];
    searchInputElems['semester'].value = semester;
    {% for subject in site.data.autoGenerated.subjectsList %}
        if ('{{ subject.semesters }}'.includes(semester)) {
            subjectsList.push('{{ subject.title }}');
        } 
    {% endfor %}
    document.getElementById('subjects-list').innerHTML = 
        getSubjectSectionHTML(subjectsList);
    search();
}

function showNotes(subject) {
    searchInputElems['subject'].value = subject;
    search();
}       

